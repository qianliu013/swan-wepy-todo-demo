<style>
.container {
  padding: 0 10px;
}
.userinfo {
  margin-top: 10px;
  display: flex;
  flex-direction: column;
  align-items: center;
}
.userinfo-avatar {
  width: 60px;
  height: 60px;
  border-radius: 50%;
}
.userinfo-nickname {
  margin-top: 5px;
  color: #aaa;
  font-size: 0.7rem;
}
</style>

<template>
  <view class="container">
    <view class="userinfo">
      <image class="userinfo-avatar" src="{{ userInfo.avatarUrl }}" background-size="cover"></image>
      <view class="userinfo-nickname">{{ userInfo.nickName }}</view>
    </view>
    <category
      :uncompleteTodos.sync="uncompleteTodos"
      :completeTodos.sync="completeTodos"
      :removedTodos.sync="removedTodos"
      :currentTab="currentTab"
    ></category>
    <newTodo></newTodo>
    <todoList :todoList.sync="shownTodoList"></todoList>
  </view>
</template>

<script>
import wepy from 'wepy'

import Catetory from '../components/category'
import NewTodo from '../components/new-todo'
import TodoList from '../components/todo-list'

import * as todoManager from '../lib/todoManager'

const isNormal = todo => !todo.removed && !todo.removedCompletely
const tabToFilter = {
  complete: todo => isNormal(todo) && todo.complete,
  uncomplete: todo => isNormal(todo) && !todo.complete,
  all: isNormal,
  trash: todo => todo.removed && !todo.removedCompletely
}
export default class extends wepy.page {
  components = {
    category: Catetory,
    newTodo: NewTodo,
    todoList: TodoList
  }

  data = {
    currentTab: 'all',
    todoList: [],
    userInfo: {
      nickName: '百度小程序用户',
      avatarUrl: 'https://b.bdstatic.com/miniapp/resource/image/headImg.png'
    }
  }

  async onLoad() {
    this.todoList = await todoManager.recoverFromStorage()
    try {
      this.userInfo = await this.$parent.getUserInfo()
    } catch (e) {
      console.error('获取用户信息失败', e)
    }
    this.$apply()
  }

  wrapTodoManagerOp(func) {
    return (...args) => {
      func(this.todoList, ...args)
      todoManager.writeToStorage(this.todoList).then(console.debug)
    }
  }

  events = {
    // new 是异步的是因为新 todo 的 id 是异步获取的
    new: async detail => {
      const newTodo = await todoManager.newTodo(detail)
      this.wrapTodoManagerOp(todoManager.addNewTodo)(newTodo)
      this.$apply()
    },
    complete: this.wrapTodoManagerOp(todoManager.complete),
    uncomplete: this.wrapTodoManagerOp(todoManager.uncomplete),
    remove: this.wrapTodoManagerOp(todoManager.remove),
    recover: this.wrapTodoManagerOp(todoManager.recover),
    removeCompletely: this.wrapTodoManagerOp(todoManager.removeCompletely)
  }

  computed = {
    completeTodos: () => this.todoList.filter(tabToFilter.complete).length,
    uncompleteTodos: () => this.todoList.filter(tabToFilter.uncomplete).length,
    removedTodos: () => this.todoList.filter(tabToFilter.trash).length,
    shownTodoList: () => this.todoList.filter(tabToFilter[this.currentTab])
  }
}
</script>
